{"metadata":"{\"compiler\":{\"version\":\"0.8.4\"},\"sources\":{\"contracts/Beeswap/Beeswap.sol\":{\"content\":\"//SPDX-License-Identifier: Unilicense\\npragma solidity ^0.8.4;\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n//import \\\"@uniswap/v2-periphery/contracts/UniswapV2Router02.sol\\\";\\nimport \\\"./V2Router.sol\\\";\\n\\ncontract Beeswap{\\n    // uniswap v3 IswapRouter\\n    ISwapRouter private immutable swapRouter;\\n    address private immutable token1;\\n    address private immutable token2;\\n    // uniswap V2\\n    address private constant ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    uint256 private immutable minimumAmountOut;\\n    uint24 private immutable poolFee;\\n\\n\\n    // uniswap v3 router\\n    // solidity prevents reading immutable (final) before initialization\\n    //address private immutable router;\\n    \\n\\n    constructor (ISwapRouter _router, address _token1, address _token2, uint256 _minimumAmountOut, uint24 _poolFee) {\\n        require(_token1 != address(0), \\\"invalid address\\\");\\n        require(_token2 != address(0), \\\"invalid address\\\");\\n        \\n        swapRouter = _router;\\n        token1 = _token1;\\n        token2 = _token2;\\n        minimumAmountOut = _minimumAmountOut;\\n        poolFee = _poolFee;\\n    }\\n\\n    // reentracy lock\\n    bool private locked = false;\\n    modifier lock(){\\n        require(!locked, \\\"contract lockde\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // Single swaps\\n\\n    // caller approves Beeswap to withdraw _amountIn from their account\\n    // Beeswap approves ISwapRouter to spend _amountIn. ie. perform the swap functionality with the said _amountIn\\n    function swapExactInput(uint256 _amountIn, address _token1, address _token2) external lock returns(uint256 _amountOut){\\n\\n        TransferHelper.safeTransferFrom(_token1, msg.sender, address(this), _amountIn);\\n        \\n        TransferHelper.safeApprove(_token1, address(swapRouter), _amountIn);\\n        \\n        ISwapRouter.ExactInputSingleParams memory _params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: _token1,\\n            tokenOut: _token2,\\n            fee: poolFee,\\n            recipient: msg.sender,\\n            deadline: block.timestamp,\\n            amountIn: _amountIn,\\n            amountOutMinimum: minimumAmountOut,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n       // uniswap exactInputSingle from swapRouter returns the maximum amount a trader could get\\n        _amountOut = swapRouter.exactInputSingle(_params);\\n        return _amountOut;\\n\\n    }\\n\\n    // exact output single swap\\n    function swapExactOutput(uint256 _amountInMaximum, uint256 _amountOut) external lock returns (uint256 _amountIn){\\n        TransferHelper.safeTransfer(token1, address(this), _amountInMaximum);\\n        TransferHelper.safeApprove(token1, address(swapRouter), _amountInMaximum);\\n\\n\\n        // used by uniswap exactOutput \\n        ISwapRouter.ExactOutputSingleParams memory _params =  ISwapRouter.ExactOutputSingleParams({\\n              tokenIn: token1,\\n                tokenOut: token2,\\n                fee: poolFee,\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountOut: _amountOut,\\n                amountInMaximum: _amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n        });\\n\\n        // call uniswap exactOutput to perform swapÃŸ\\n        // change to Iswap \\n       _amountIn = swapRouter.exactOutputSingle(_params);\\n\\n       // check if all tokens supplied were spent in the trade\\n       if(_amountInMaximum > _amountIn){\\n           TransferHelper.safeApprove(token1, address(swapRouter), 0);\\n           TransferHelper.safeTransfer(token1, msg.sender, _amountInMaximum - _amountIn);\\n       }\\n\\n       return _amountIn;\\n    }\\n\\n\\n//     function swapExactTokensForTokens(\\n//   uint amountIn,\\n//   uint amountOutMin,\\n//   address[] calldata path,\\n//   address to,\\n//   uint deadline\\n// ) external returns (uint[] memory amounts);\\n\\n   function swapTokensForTokens(uint256 _amountIn) external {\\n        TransferHelper.safeTransferFrom(token1, msg.sender, address(this), _amountIn);\\n            \\n        TransferHelper.safeApprove(token1, address(swapRouter), _amountIn);\\n\\n        (address weth) =  IV2Router(ROUTER).WETH();\\n\\n        address[] memory path = new address[](3);\\n        path[0] = token1;\\n        path[1] = weth;\\n        path[2] = token2;\\n\\n        //IV2Router(router).swapExactTokensForTokens(_ amountIn, 0, path, msg.sender, block.timestamp);\\n\\n        IV2Router(ROUTER).swapExactTokensForTokens(_amountIn, 1, path, msg.sender, block.timestamp);\\n   }\\n\\n  \\n   //1pjW5jD9uORP4UBluh0jwgI5PX3Tk6SC\\n\\n}\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"},\"contracts/Beeswap/V2Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"}}}","address":"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0","bytecode":"0x61012060405260008060006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162001d2e38038062001d2e833981810160405281019062000052919062000262565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620000c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000bc906200030b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141562000138576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012f906200030b565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508160e081815250508062ffffff166101008162ffffff1660e81b81525050505050505062000430565b6000815190506200021781620003c8565b92915050565b6000815190506200022e81620003e2565b92915050565b6000815190506200024581620003fc565b92915050565b6000815190506200025c8162000416565b92915050565b600080600080600060a086880312156200027b57600080fd5b60006200028b888289016200021d565b95505060206200029e8882890162000206565b9450506040620002b18882890162000206565b9350506060620002c4888289016200024b565b9250506080620002d78882890162000234565b9150509295509295909350565b6000620002f3600f836200032d565b915062000300826200039f565b602082019050919050565b600060208201905081810360008301526200032681620002e4565b9050919050565b600082825260208201905092915050565b60006200034b8262000366565b9050919050565b60006200035f826200033e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b7f696e76616c696420616464726573730000000000000000000000000000000000600082015250565b620003d3816200033e565b8114620003df57600080fd5b50565b620003ed8162000352565b8114620003f957600080fd5b50565b620004078162000386565b81146200041357600080fd5b50565b620004218162000395565b81146200042d57600080fd5b50565b60805160601c60a05160601c60c05160601c60e0516101005160e81c61184d620004e16000396000818161057f015261084b015260006105d201526000818161034f015261080f01526000818160c70152818160f301528181610245015281816107520152818161077d015281816107d30152818161097901526109c501526000818161011401528181610512015281816106150152818161079e015281816108c1015261099a015261184d6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806325007a0f146100465780638d72298814610062578063b03a633e14610092575b600080fd5b610060600480360381019061005b9190610fac565b6100c2565b005b61007c60048036038101906100779190610ffe565b610495565b6040516100899190611498565b60405180910390f35b6100ac60048036038101906100a7919061104d565b6106e2565b6040516100b99190611498565b60405180910390f35b6100ee7f0000000000000000000000000000000000000000000000000000000000000000333084610a18565b6101397f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083610b70565b6000737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561019557600080fd5b505afa1580156101a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cd9190610f19565b90506000600367ffffffffffffffff811115610212577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102405781602001602082028036833780820191505090505b5090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061029e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110610313577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000000000000000000000000000000000000000000000816002815181106103a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff166338ed17398460018433426040518663ffffffff1660e01b81526004016104389594939291906114b3565b600060405180830381600087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061048f9190610f42565b50505050565b60008060009054906101000a900460ff16156104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611440565b60405180910390fd5b60016000806101000a81548160ff02191690831515021790555061050c83333087610a18565b610537837f000000000000000000000000000000000000000000000000000000000000000086610b70565b60006040518061010001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020017f00000000000000000000000000000000000000000000000000000000000000008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161066c9190611460565b602060405180830381600087803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610fd5565b91505060008060006101000a81548160ff0219169083151502179055509392505050565b60008060009054906101000a900460ff1615610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072a90611440565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055506107787f00000000000000000000000000000000000000000000000000000000000000003085610cc5565b6107c37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610b70565b60006040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db3e2198826040518263ffffffff1660e01b8152600401610918919061147c565b602060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190610fd5565b9150818411156109f7576109c07f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006000610b70565b6109f67f00000000000000000000000000000000000000000000000000000000000000003384876109f191906115be565b610cc5565b5b5060008060006101000a81548160ff02191690831515021790555092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610a4f93929190611380565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ab99190611369565b6000604051808303816000865af19150503d8060008114610af6576040519150601f19603f3d011682016040523d82523d6000602084013e610afb565b606091505b5091509150818015610b295750600081511480610b28575080806020019051810190610b279190610f83565b5b5b610b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5f90611420565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610ba59291906113b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c0f9190611369565b6000604051808303816000865af19150503d8060008114610c4c576040519150601f19603f3d011682016040523d82523d6000602084013e610c51565b606091505b5091509150818015610c7f5750600081511480610c7e575080806020019051810190610c7d9190610f83565b5b5b610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb5906113e0565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610cfa9291906113b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d649190611369565b6000604051808303816000865af19150503d8060008114610da1576040519150601f19603f3d011682016040523d82523d6000602084013e610da6565b606091505b5091509150818015610dd45750600081511480610dd3575080806020019051810190610dd29190610f83565b5b5b610e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0a90611400565b60405180910390fd5b5050505050565b6000610e2d610e2884611532565b61150d565b90508083825260208201905082856020860282011115610e4c57600080fd5b60005b85811015610e7c5781610e628882610f04565b845260208401935060208301925050600181019050610e4f565b5050509392505050565b600081359050610e95816117d2565b92915050565b600081519050610eaa816117d2565b92915050565b600082601f830112610ec157600080fd5b8151610ed1848260208601610e1a565b91505092915050565b600081519050610ee9816117e9565b92915050565b600081359050610efe81611800565b92915050565b600081519050610f1381611800565b92915050565b600060208284031215610f2b57600080fd5b6000610f3984828501610e9b565b91505092915050565b600060208284031215610f5457600080fd5b600082015167ffffffffffffffff811115610f6e57600080fd5b610f7a84828501610eb0565b91505092915050565b600060208284031215610f9557600080fd5b6000610fa384828501610eda565b91505092915050565b600060208284031215610fbe57600080fd5b6000610fcc84828501610eef565b91505092915050565b600060208284031215610fe757600080fd5b6000610ff584828501610f04565b91505092915050565b60008060006060848603121561101357600080fd5b600061102186828701610eef565b935050602061103286828701610e86565b925050604061104386828701610e86565b9150509250925092565b6000806040838503121561106057600080fd5b600061106e85828601610eef565b925050602061107f85828601610eef565b9150509250929050565b600061109583836110a1565b60208301905092915050565b6110aa816115f2565b82525050565b6110b9816115f2565b82525050565b60006110ca8261156e565b6110d48185611591565b93506110df8361155e565b8060005b838110156111105781516110f78882611089565b975061110283611584565b9250506001810190506110e3565b5085935050505092915050565b600061112882611579565b61113281856115a2565b935061114281856020860161165b565b80840191505092915050565b61115781611649565b82525050565b600061116a6002836115ad565b91506111758261172e565b602082019050919050565b600061118d6002836115ad565b915061119882611757565b602082019050919050565b60006111b06003836115ad565b91506111bb82611780565b602082019050919050565b60006111d3600f836115ad565b91506111de826117a9565b602082019050919050565b6101008201600082015161120060008501826110a1565b50602082015161121360208501826110a1565b506040820151611226604085018261133c565b50606082015161123960608501826110a1565b50608082015161124c608085018261134b565b5060a082015161125f60a085018261134b565b5060c082015161127260c085018261134b565b5060e082015161128560e085018261132d565b50505050565b610100820160008201516112a260008501826110a1565b5060208201516112b560208501826110a1565b5060408201516112c8604085018261133c565b5060608201516112db60608501826110a1565b5060808201516112ee608085018261134b565b5060a082015161130160a085018261134b565b5060c082015161131460c085018261134b565b5060e082015161132760e085018261132d565b50505050565b61133681611610565b82525050565b61134581611630565b82525050565b6113548161163f565b82525050565b6113638161163f565b82525050565b6000611375828461111d565b915081905092915050565b600060608201905061139560008301866110b0565b6113a260208301856110b0565b6113af604083018461135a565b949350505050565b60006040820190506113cc60008301856110b0565b6113d9602083018461135a565b9392505050565b600060208201905081810360008301526113f98161115d565b9050919050565b6000602082019050818103600083015261141981611180565b9050919050565b60006020820190508181036000830152611439816111a3565b9050919050565b60006020820190508181036000830152611459816111c6565b9050919050565b60006101008201905061147660008301846111e9565b92915050565b600061010082019050611492600083018461128b565b92915050565b60006020820190506114ad600083018461135a565b92915050565b600060a0820190506114c8600083018861135a565b6114d5602083018761114e565b81810360408301526114e781866110bf565b90506114f660608301856110b0565b611503608083018461135a565b9695505050505050565b6000611517611528565b9050611523828261168e565b919050565b6000604051905090565b600067ffffffffffffffff82111561154d5761154c6116ee565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115c98261163f565b91506115d48361163f565b9250828210156115e7576115e66116bf565b5b828203905092915050565b60006115fd82611610565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006116548261163f565b9050919050565b60005b8381101561167957808201518184015260208101905061165e565b83811115611688576000848401525b50505050565b6116978261171d565b810181811067ffffffffffffffff821117156116b6576116b56116ee565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f636f6e7472616374206c6f636b64650000000000000000000000000000000000600082015250565b6117db816115f2565b81146117e657600080fd5b50565b6117f281611604565b81146117fd57600080fd5b50565b6118098161163f565b811461181457600080fd5b5056fea2646970667358221220b2e42b87627fc4d65231ab31dc44fa397411cdd88e91316a73914ea966e9e64464736f6c63430008040033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c806325007a0f146100465780638d72298814610062578063b03a633e14610092575b600080fd5b610060600480360381019061005b9190610fac565b6100c2565b005b61007c60048036038101906100779190610ffe565b610495565b6040516100899190611498565b60405180910390f35b6100ac60048036038101906100a7919061104d565b6106e2565b6040516100b99190611498565b60405180910390f35b6100ee7f0000000000000000000000000000000000000000000000000000000000000000333084610a18565b6101397f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083610b70565b6000737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561019557600080fd5b505afa1580156101a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cd9190610f19565b90506000600367ffffffffffffffff811115610212577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156102405781602001602082028036833780820191505090505b5090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061029e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110610313577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000000000000000000000000000000000000000000000816002815181106103a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff166338ed17398460018433426040518663ffffffff1660e01b81526004016104389594939291906114b3565b600060405180830381600087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061048f9190610f42565b50505050565b60008060009054906101000a900460ff16156104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611440565b60405180910390fd5b60016000806101000a81548160ff02191690831515021790555061050c83333087610a18565b610537837f000000000000000000000000000000000000000000000000000000000000000086610b70565b60006040518061010001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018681526020017f00000000000000000000000000000000000000000000000000000000000000008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b815260040161066c9190611460565b602060405180830381600087803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610fd5565b91505060008060006101000a81548160ff0219169083151502179055509392505050565b60008060009054906101000a900460ff1615610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072a90611440565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055506107787f00000000000000000000000000000000000000000000000000000000000000003085610cc5565b6107c37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610b70565b60006040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000062ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663db3e2198826040518263ffffffff1660e01b8152600401610918919061147c565b602060405180830381600087803b15801561093257600080fd5b505af1158015610946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096a9190610fd5565b9150818411156109f7576109c07f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006000610b70565b6109f67f00000000000000000000000000000000000000000000000000000000000000003384876109f191906115be565b610cc5565b5b5060008060006101000a81548160ff02191690831515021790555092915050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610a4f93929190611380565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ab99190611369565b6000604051808303816000865af19150503d8060008114610af6576040519150601f19603f3d011682016040523d82523d6000602084013e610afb565b606091505b5091509150818015610b295750600081511480610b28575080806020019051810190610b279190610f83565b5b5b610b68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5f90611420565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610ba59291906113b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c0f9190611369565b6000604051808303816000865af19150503d8060008114610c4c576040519150601f19603f3d011682016040523d82523d6000602084013e610c51565b606091505b5091509150818015610c7f5750600081511480610c7e575080806020019051810190610c7d9190610f83565b5b5b610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb5906113e0565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610cfa9291906113b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d649190611369565b6000604051808303816000865af19150503d8060008114610da1576040519150601f19603f3d011682016040523d82523d6000602084013e610da6565b606091505b5091509150818015610dd45750600081511480610dd3575080806020019051810190610dd29190610f83565b5b5b610e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0a90611400565b60405180910390fd5b5050505050565b6000610e2d610e2884611532565b61150d565b90508083825260208201905082856020860282011115610e4c57600080fd5b60005b85811015610e7c5781610e628882610f04565b845260208401935060208301925050600181019050610e4f565b5050509392505050565b600081359050610e95816117d2565b92915050565b600081519050610eaa816117d2565b92915050565b600082601f830112610ec157600080fd5b8151610ed1848260208601610e1a565b91505092915050565b600081519050610ee9816117e9565b92915050565b600081359050610efe81611800565b92915050565b600081519050610f1381611800565b92915050565b600060208284031215610f2b57600080fd5b6000610f3984828501610e9b565b91505092915050565b600060208284031215610f5457600080fd5b600082015167ffffffffffffffff811115610f6e57600080fd5b610f7a84828501610eb0565b91505092915050565b600060208284031215610f9557600080fd5b6000610fa384828501610eda565b91505092915050565b600060208284031215610fbe57600080fd5b6000610fcc84828501610eef565b91505092915050565b600060208284031215610fe757600080fd5b6000610ff584828501610f04565b91505092915050565b60008060006060848603121561101357600080fd5b600061102186828701610eef565b935050602061103286828701610e86565b925050604061104386828701610e86565b9150509250925092565b6000806040838503121561106057600080fd5b600061106e85828601610eef565b925050602061107f85828601610eef565b9150509250929050565b600061109583836110a1565b60208301905092915050565b6110aa816115f2565b82525050565b6110b9816115f2565b82525050565b60006110ca8261156e565b6110d48185611591565b93506110df8361155e565b8060005b838110156111105781516110f78882611089565b975061110283611584565b9250506001810190506110e3565b5085935050505092915050565b600061112882611579565b61113281856115a2565b935061114281856020860161165b565b80840191505092915050565b61115781611649565b82525050565b600061116a6002836115ad565b91506111758261172e565b602082019050919050565b600061118d6002836115ad565b915061119882611757565b602082019050919050565b60006111b06003836115ad565b91506111bb82611780565b602082019050919050565b60006111d3600f836115ad565b91506111de826117a9565b602082019050919050565b6101008201600082015161120060008501826110a1565b50602082015161121360208501826110a1565b506040820151611226604085018261133c565b50606082015161123960608501826110a1565b50608082015161124c608085018261134b565b5060a082015161125f60a085018261134b565b5060c082015161127260c085018261134b565b5060e082015161128560e085018261132d565b50505050565b610100820160008201516112a260008501826110a1565b5060208201516112b560208501826110a1565b5060408201516112c8604085018261133c565b5060608201516112db60608501826110a1565b5060808201516112ee608085018261134b565b5060a082015161130160a085018261134b565b5060c082015161131460c085018261134b565b5060e082015161132760e085018261132d565b50505050565b61133681611610565b82525050565b61134581611630565b82525050565b6113548161163f565b82525050565b6113638161163f565b82525050565b6000611375828461111d565b915081905092915050565b600060608201905061139560008301866110b0565b6113a260208301856110b0565b6113af604083018461135a565b949350505050565b60006040820190506113cc60008301856110b0565b6113d9602083018461135a565b9392505050565b600060208201905081810360008301526113f98161115d565b9050919050565b6000602082019050818103600083015261141981611180565b9050919050565b60006020820190508181036000830152611439816111a3565b9050919050565b60006020820190508181036000830152611459816111c6565b9050919050565b60006101008201905061147660008301846111e9565b92915050565b600061010082019050611492600083018461128b565b92915050565b60006020820190506114ad600083018461135a565b92915050565b600060a0820190506114c8600083018861135a565b6114d5602083018761114e565b81810360408301526114e781866110bf565b90506114f660608301856110b0565b611503608083018461135a565b9695505050505050565b6000611517611528565b9050611523828261168e565b919050565b6000604051905090565b600067ffffffffffffffff82111561154d5761154c6116ee565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115c98261163f565b91506115d48361163f565b9250828210156115e7576115e66116bf565b5b828203905092915050565b60006115fd82611610565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006116548261163f565b9050919050565b60005b8381101561167957808201518184015260208101905061165e565b83811115611688576000848401525b50505050565b6116978261171d565b810181811067ffffffffffffffff821117156116b6576116b56116ee565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f636f6e7472616374206c6f636b64650000000000000000000000000000000000600082015250565b6117db816115f2565b81146117e657600080fd5b50565b6117f281611604565b81146117fd57600080fd5b50565b6118098161163f565b811461181457600080fd5b5056fea2646970667358221220b2e42b87627fc4d65231ab31dc44fa397411cdd88e91316a73914ea966e9e64464736f6c63430008040033","abi":[{"inputs":[{"internalType":"contract ISwapRouter","name":"_router","type":"address"},{"internalType":"address","name":"_token1","type":"address"},{"internalType":"address","name":"_token2","type":"address"},{"internalType":"uint256","name":"_minimumAmountOut","type":"uint256"},{"internalType":"uint24","name":"_poolFee","type":"uint24"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"_amountIn","type":"uint256"},{"internalType":"address","name":"_token1","type":"address"},{"internalType":"address","name":"_token2","type":"address"}],"name":"swapExactInput","outputs":[{"internalType":"uint256","name":"_amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amountInMaximum","type":"uint256"},{"internalType":"uint256","name":"_amountOut","type":"uint256"}],"name":"swapExactOutput","outputs":[{"internalType":"uint256","name":"_amountIn","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amountIn","type":"uint256"}],"name":"swapTokensForTokens","outputs":[],"stateMutability":"nonpayable","type":"function"}]}